name: Host dbt doc on website

on:
  workflow_call:
    inputs:
      runner_type:
        required: true
        type: string

      dbt_project_name:
        required: true
        type: string    

      dbt_project_path:
        required: true
        type: string

    # https://docs.github.com/en/actions/using-workflows/reusing-workflows#using-inputs-and-secrets-in-a-reusable-workflow
    secrets:
      secrets_dbt_profile:
        required: true

permissions:
  contents: write

env:
  DBT_MODEL_GHA_METADATA: "github_actions_metadata"
  DBT_SCHEMA: "ghactions"
  
jobs:
  # triage:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/labeler@v4
  #     with:
  #       repo-token: ${{ secrets.token }}
  #       configuration-path: ${{ inputs.config-path }}

  build:  
    runs-on: ${{ inputs.runner_type }} # self-hosted # environment to be used
    environment: dev
    steps:
      - uses: actions/checkout@v3
      
      # - name: Setup Python
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: '3.9'
        
      # - name: Install dbt
      #   run: pip install dbt-sqlserver==1.3.0
        
      # - name: Install dbt deps
      #   run: dbt deps
      #   working-directory: ${{ inputs.dbt_project_path }}

      # - name: (Windows) create dbt model (.sql) to document current CI build no.
      #   if: runner.os == 'Windows'
      #   run: |
      #     $output_dir = "${{ inputs.dbt_project_path }}/models/${{ env.DBT_SCHEMA }}"
      #     $output_path = "$output_dir/${{ env.DBT_MODEL_GHA_METADATA }}.sql"

      #     mkdir $output_dir -Force
          
      #     $content = echo "
      #       {{ config(
      #           materialized='view',
      #           schema='${{ env.DBT_SCHEMA }}',
      #         ) }}

      #       -- Full list of variables: https://docs.github.com/en/actions/learn-github-actions/environment-variables
      #       select
      #         '${{ github.repositoryUrl }}' as repo_url,
      #         '${{ github.sha }}' as repo_sha,

      #         '${{ github.workflow }}' as workflow_name,
      #         '${{ github.ref }}' as workflow_trigger,
      #         '${{ github.run_number }}' as build_no,
      #         '${{ github.run_attempt }}' as build_run_attempt,
              
      #         '${{ github.actor }}' as actor,
      #         '${{ runner.name }}' as runner_name,
      #         '${{ runner.os }}' as runner_os,
      #         '${{ runner.arch }}' as runner_arch
      #     "
          
      #     Out-File -FilePath $output_path -InputObject $content -Encoding utf8

      #     # Convert to UTF-8 No BOM
      #     $MyFile = Get-Content $output_path
      #     $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False
      #     [System.IO.File]::WriteAllLines($output_path, $MyFile, $Utf8NoBomEncoding)

      - name: (Windows) Write file
        if: runner.os == 'Windows'
        run: |
          Get-ChildItem Env:

          $output_dir = "."
          $output_path = "$output_dir/secrets_dbt_profile.json"

          mkdir $output_dir -Force
          
          $content = echo "
            ${{ inputs.secrets_dbt_profile }}
          "
          
          Out-File -FilePath $output_path -InputObject $content -Encoding utf8

          # Convert to UTF-8 No BOM
          $MyFile = Get-Content $output_path
          $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False
          [System.IO.File]::WriteAllLines($output_path, $MyFile, $Utf8NoBomEncoding)

      # - uses: jsdaniell/create-json@1.1.2
      #   with:
      #     name: "cypress.json"
      #     json: ${{ secrets.CYPRESS_CONFIG_JSON }}
      #     dir: ${{ inputs.dbt_project_path }}


      # - uses: jsdaniell/create-json@1.1.2
      #   with:
      #     name: "cypress.yaml"
      #     json: ${{ secrets.NO_ENV_CYPRESS_CONFIG_JSON }}
      #     dir: ${{ inputs.dbt_project_path }}

      # - name: (Windows) create dbt profiles (.yml)
      #   if: runner.os == 'Windows'
      #   env:
      #     DBT_SERVER: "${{ secrets.DBT_SERVER }}"
      #     DBT_DATABASE: "${{ secrets.DBT_DATABASE }}"
      #     DBT_USER: "${{ secrets.DBT_USER }}"
      #     DBT_PASSWORD: "${{ secrets.DBT_PASSWORD }}"
      #   run: |
      #     Get-ChildItem Env:

      #     $output_dir = "${{ inputs.dbt_project_path }}"
      #     $output_path = "$output_dir/profiles.yml"

      #     # mkdir $output_dir -Force
      #     echo "1DBT_PASSWORD = '$DBT_PASSWORD'"
      #     echo "2DBT_PASSWORD = '${DBT_PASSWORD}'"
      #     echo "3DBT_PASSWORD = '${{ secrets.DBT_PASSWORD }}'"
          
      #     $content = echo "
      #     ${{ inputs.dbt_project_name }}:
      #       # This file is generate by CI pipeline
      #       target: dev
      #       outputs:
      #           dev:
      #             type: sqlserver
      #             driver: 'ODBC Driver 17 for SQL Server'
      #             server: '${DBT_SERVER}'
      #             database: '${DBT_DATABASE}'
      #             schema: dbo
      #             user: '${DBT_USER}'
      #             password: '$DBT_PASSWORD'
      #             password: '${DBT_PASSWORD}'
      #             password: '${{ secrets.DBT_PASSWORD }}'
      #             trust_cert: true
      #     "
          
      #     Out-File -FilePath $output_path -InputObject $content -Encoding utf8

      #     # Convert to UTF-8 No BOM
      #     $MyFile = Get-Content $output_path
      #     $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False
      #     [System.IO.File]::WriteAllLines($output_path, $MyFile, $Utf8NoBomEncoding)


      # - name: dbt run ${{ env.DBT_MODEL_GHA_METADATA }}
      #   if: runner.os == 'Windows'
      #   run: dbt run --select ${{ env.DBT_MODEL_GHA_METADATA }} --profiles-dir .
      #   working-directory: ${{ inputs.dbt_project_path }}  

      # - name: dbt docs gen
      #   run: dbt docs generate --profiles-dir .
      #   working-directory: ${{ inputs.dbt_project_path }}

      # - name: dbt compile
      #   run: dbt compile --profiles-dir .
      #   working-directory: ${{ inputs.dbt_project_path }}
        
      - name: Upload Artifacts ðŸ”º # The project is then uploaded as an artifact named 'site'.
        uses: actions/upload-artifact@v1
        with:
          name: artifact
          # path: ${{ inputs.dbt_project_path }}/target # etl/CDW_FB_SQ
          path: ${{ inputs.dbt_project_path }} # etl/CDW_FB_SQ
      

  # deploy:
  #   needs: [build]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Download Artifacts ðŸ”» # The built project is downloaded into the 'site' folder.
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: artifact

  #     # - name: ls recursively to check current and subdirectory
  #     #   run: |
  #     #     ls -R
      
  #     - name: Deploy
  #       uses: JamesIves/github-pages-deploy-action@v4
  #       with: 
  #         folder: artifact # etl/CDW_FB_SQ/target
